'use strict';

import { factories } from '@strapi/strapi';
import type { Context } from 'koa';

// ƒê·ªãnh nghƒ©a interface cho Post ƒë·ªÉ s·ª≠ d·ª•ng trong Category
interface Post {
  id: number;
  title: string;
  slug: string;
  publishedAt: string;
  excerpt?: string;
  clickCount?: number;
  thumbnail?: { url: string };
  author?: { username: string; avatar?: { url: string } };
  categories?: Array<{ id: number; name: string; slug: string }>;
  source?: { id: number; name: string; url?: string };
}

// ƒê·ªãnh nghƒ©a interface cho Category khi populate posts
interface CategoryWithPosts {
  id: number;
  name: string;
  slug: string;
  posts?: Post[]; // M·∫£ng c√°c b√†i vi·∫øt li√™n quan
  // Th√™m c√°c tr∆∞·ªùng kh√°c c·ªßa category n·∫øu c·∫ßn
}

/**
 * category controller
 */
export default factories.createCoreController('api::category.category', ({ strapi }) => ({
  /**
   * T√πy ch·ªânh h√†nh ƒë·ªông t√¨m ki·∫øm (find) ƒë·ªÉ ƒë·∫£m b·∫£o populate c√°c quan h·ªá c·∫ßn thi·∫øt.
   * ƒê√¢y l√† handler cho GET /api/categories
   * @param {object} ctx
   */
  async find(ctx: Context) {
    console.log('--- Custom Category find called (using entityService directly) ---');
    console.log('ctx.query:', ctx.query);
    console.log('----------------------------------------------------');

    // Tr√≠ch xu·∫•t c√°c tham s·ªë query cho filters, pagination, sort
    const { query } = ctx;

    // ƒê·∫£m b·∫£o 'filters' lu√¥n l√† m·ªôt ƒë·ªëi t∆∞·ª£ng
    const filters = (typeof query.filters === 'object' && query.filters !== null)
      ? query.filters
      : {};

    const pagination = query.pagination;
    const sort = query.sort;

    // ƒê·ªãnh nghƒ©a c√°c t√πy ch·ªçn populate m·∫∑c ƒë·ªãnh cho find (l·∫•y t·∫•t c·∫£ danh m·ª•c)
    const defaultPopulate = {
      posts: {
        fields: ['id', 'title', 'slug', 'publishedAt'], // L·∫•y c√°c tr∆∞·ªùng c·∫ßn thi·∫øt c·ªßa post
      },
      // Th√™m c√°c quan h·ªá kh√°c ·ªü ƒë√¢y n·∫øu c·∫ßn, v√≠ d·ª•: 'sources'
    };

    try {
      // S·ª≠ d·ª•ng strapi.entityService.findMany tr·ª±c ti·∫øp ƒë·ªÉ l·∫•y d·ªØ li·ªáu
      const entries = await strapi.entityService.findMany('api::category.category', {
        filters: filters,
        populate: defaultPopulate,
        pagination: pagination,
        sort: sort,
      });

      // L·∫•y t·ªïng s·ªë l∆∞·ª£ng b·∫£n ghi cho metadata ph√¢n trang
      const count = await strapi.entityService.count('api::category.category', { filters });

      // Chuy·ªÉn ƒë·ªïi c√°c b·∫£n ghi ƒë·ªÉ ph√π h·ª£p v·ªõi ƒë·ªãnh d·∫°ng ph·∫£n h·ªìi API m·∫∑c ƒë·ªãnh c·ªßa Strapi (data v√† meta)
      const transformedEntries = entries.map((entry: any) => ({
        id: entry.id,
        attributes: {
          ...entry, // Tr·∫£i t·∫•t c·∫£ c√°c thu·ªôc t√≠nh kh√°c
          // ƒê·∫£m b·∫£o c√°c quan h·ªá ƒë∆∞·ª£c l·ªìng ƒë√∫ng c√°ch d∆∞·ªõi 'attributes'
          posts: entry.posts ? entry.posts.map((post: any) => ({
            id: post.id,
            title: post.title,
            slug: post.slug,
            publishedAt: post.publishedAt,
          })) : [],
        }
      }));

      // T√≠nh to√°n metadata ph√¢n trang
      const page = parseInt((pagination as any)?.page as string || '1', 10);
      const pageSize = parseInt((pagination as any)?.pageSize as string || '25', 10);

      const response = {
        data: transformedEntries,
        meta: {
          pagination: {
            page: page,
            pageSize: pageSize,
            pageCount: Math.ceil(count / pageSize),
            total: count,
          },
        },
      };

      console.log('--- Custom Category find response (direct entityService) ---');
      console.log(JSON.stringify(response, null, 2));
      console.log('------------------------------------------------------------');

      ctx.body = response;
      return response;
    } catch (error: any) {
      console.error('‚ùå L·ªói khi l·∫•y danh s√°ch danh m·ª•c (direct entityService):', error);
      ctx.internalServerError('L·ªói khi l·∫•y danh s√°ch danh m·ª•c.');
    }
  },

  /**
   * T√πy ch·ªânh h√†nh ƒë·ªông t√¨m ki·∫øm m·ªôt b·∫£n ghi (findOne) theo ID ho·∫∑c slug.
   * ƒê√¢y l√† handler cho GET /api/categories/:id ho·∫∑c /api/categories/:slug
   * @param {object} ctx
   */
  async findOne(ctx: Context) {
    console.log('--- Custom Category findOne called ---');
    console.log('ctx.params:', ctx.params);
    console.log('ctx.query:', ctx.query);
    console.log('------------------------------------');

    const { id } = ctx.params; // L·∫•y ID ho·∫∑c slug t·ª´ params
    const { populate } = ctx.query; // Cho ph√©p t√πy ch·ªânh populate t·ª´ query params

    try {
      let category: CategoryWithPosts | null = null;

      // üî¥ S·ª¨A L·ªñI ·ªû ƒê√ÇY: ƒê∆°n gi·∫£n h√≥a populate m·∫∑c ƒë·ªãnh cho findOne
      // Ch·ªâ populate c√°c tr∆∞·ªùng c∆° b·∫£n c·ªßa posts ƒë·ªÉ ki·ªÉm tra
      const defaultPopulate = {
        posts: {
          fields: ['id', 'title', 'slug'], // Ch·ªâ l·∫•y ID, title, slug c·ªßa post
          // T·∫°m th·ªùi b·ªè populate s√¢u h∆°n c·ªßa post ƒë·ªÉ ƒë∆°n gi·∫£n h√≥a
        },
        // Th√™m c√°c quan h·ªá tr·ª±c ti·∫øp kh√°c c·ªßa category n·∫øu c·∫ßn
      };

      // X·ª≠ l√Ω populate: n·∫øu c√≥ populate t·ª´ query, s·ª≠ d·ª•ng n√≥, n·∫øu kh√¥ng, d√πng defaultPopulate
      const actualPopulate = populate || defaultPopulate;

      // Ki·ªÉm tra xem 'id' c√≥ ph·∫£i l√† m·ªôt s·ªë nguy√™n (ID) hay l√† m·ªôt chu·ªói (slug)
      if (isNaN(Number(id))) { // N·∫øu kh√¥ng ph·∫£i s·ªë, coi l√† slug
        console.log(`Finding category by slug: ${id}`);
        const entities = await strapi.entityService.findMany('api::category.category', {
          filters: { slug: { $eq: id } },
          populate: actualPopulate,
          limit: 1,
        }) as CategoryWithPosts[];
        category = entities[0] || null;
      } else { // N·∫øu l√† s·ªë, coi l√† ID
        console.log(`Finding category by ID: ${id}`);
        category = await strapi.entityService.findOne('api::category.category', id, {
          populate: actualPopulate,
        }) as CategoryWithPosts;
      }

      if (!category) {
        return ctx.notFound('Kh√¥ng t√¨m th·∫•y danh m·ª•c.');
      }

      // Sanitize the output to respect roles and permissions
      const sanitizedEntity = await this.sanitizeOutput(category, ctx);

      // Tr·∫£ v·ªÅ ph·∫£n h·ªìi ƒë√£ ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi
      return this.transformResponse(sanitizedEntity);
    } catch (error: any) {
      console.error('‚ùå L·ªói khi l·∫•y chi ti·∫øt danh m·ª•c:', error);
      ctx.internalServerError('L·ªói khi l·∫•y chi ti·∫øt danh m·ª•c.');
    }
  },
}));
