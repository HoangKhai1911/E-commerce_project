// scripts/seed.ts
// Ho·∫∑c khuy·∫øn ngh·ªã ƒë·∫∑t t·∫°i: src/seed/seed-data.ts ƒë·ªÉ t·ªï ch·ª©c project t·ªët h∆°n

// ƒê·ªãnh nghƒ©a c√°c Interface cho d·ªØ li·ªáu seed
interface CategorySeed {
  name: string;
  slug: string;
  description?: string; // T√πy ch·ªçn: n·∫øu b·∫°n c√≥ tr∆∞·ªùng n√†y trong schema Category
}

interface SourceSeed {
  name: string;
  URL: string; // ƒê√É THAY ƒê·ªîI T·ª™ 'rss_url' TH√ÄNH 'URL' ƒê·ªÇ KH·ªöP V·ªöI SCHEMA C·ª¶A B·∫†N
  homepage_url?: string; // T√πy ch·ªçn: n·∫øu b·∫°n c√≥ tr∆∞·ªùng n√†y
  logo?: string;        // T√πy ch·ªçn: n·∫øu b·∫°n c√≥ tr∆∞·ªùng n√†y
  description?: string; // T√πy ch·ªçn: n·∫øu b·∫°n c√≥ tr∆∞·ªùng n√†y
  category_slugs: string[]; // M·ªôt ngu·ªìn c√≥ th·ªÉ thu·ªôc nhi·ªÅu danh m·ª•c
}

// D·ªØ li·ªáu m·∫´u cho Categories
const categoriesData: CategorySeed[] = [
  { name: 'C√¥ng ngh·ªá', slug: 'cong-nghe' },
  { name: 'Th·ªÉ thao', slug: 'the-thao' },
  { name: 'Kinh doanh', slug: 'kinh-doanh' },
  { name: 'S·ª©c kh·ªèe', slug: 'suc-khoe' },
  { name: 'Gi·∫£i tr√≠', slug: 'giai-tri' },
  { name: 'Gi√°o d·ª•c', slug: 'giao-duc' },
  { name: 'Du l·ªãch', slug: 'du-lich' },
  { name: '√î t√¥ - Xe m√°y', slug: 'o-to-xe-may' },
  { name: 'Khoa h·ªçc', slug: 'khoa-hoc' },
  { name: 'Th·ªùi s·ª±', slug: 'thoi-su' },
];

// D·ªØ li·ªáu m·∫´u cho Sources
const sourcesData: SourceSeed[] = [
  {
    name: 'VNExpress C√¥ng Ngh·ªá',
    URL: 'https://vnexpress.net/rss/so-hoa.rss', // ƒê√É THAY ƒê·ªîI T·ª™ 'rss_url' TH√ÄNH 'URL'
    category_slugs: ['cong-nghe'],
  },
  {
    name: 'VNExpress Th·ªÉ Thao',
    URL: 'https://vnexpress.net/rss/the-thao.rss', // ƒê√É THAY ƒê·ªîI T·ª™ 'rss_url' TH√ÄNH 'URL'
    category_slugs: ['the-thao'],
  },
  {
    name: 'CafeF Kinh Doanh',
    URL: 'https://cafef.vn/trang-chu.rss', // ƒê√É THAY ƒê·ªîI T·ª™ 'rss_url' TH√ÄNH 'URL'
    category_slugs: ['kinh-doanh'],
  },
  {
    name: 'VNExpress S·ª©c Kh·ªèe',
    URL: 'https://vnexpress.net/rss/suc-khoe.rss', // ƒê√É THAY ƒê·ªîI T·ª™ 'rss_url' TH√ÄNH 'URL'
    category_slugs: ['suc-khoe'],
  },
  {
    name: 'Zing Gi·∫£i Tr√≠',
    URL: 'https://zingnews.vn/rss/giai-tri.rss', // ƒê√É THAY ƒê·ªîI T·ª™ 'rss_url' TH√ÄNH 'URL'
    category_slugs: ['giai-tri'],
  },
  {
    name: 'VNExpress Gi√°o D·ª•c',
    URL: 'https://vnexpress.net/rss/giao-duc.rss', // ƒê√É THAY ƒê·ªîI T·ª™ 'rss_url' TH√ÄNH 'URL'
    category_slugs: ['giao-duc'],
  },
  {
    name: 'VNExpress Du L·ªãch',
    URL: 'https://vnexpress.net/rss/du-lich.rss', // ƒê√É THAY ƒê·ªîI T·ª™ 'rss_url' TH√ÄNH 'URL'
    category_slugs: ['du-lich'],
  },
  {
    name: 'VNExpress Xe',
    URL: 'https://vnexpress.net/rss/oto-xe-may.rss', // ƒê√É THAY ƒê·ªîI T·ª™ 'rss_url' TH√ÄNH 'URL'
    category_slugs: ['o-to-xe-may'],
  },
  {
    name: 'VNExpress Khoa H·ªçc',
    URL: 'https://vnexpress.net/rss/khoa-hoc.rss', // ƒê√É THAY ƒê·ªîI T·ª™ 'rss_url' TH√ÄNH 'URL'
    category_slugs: ['khoa-hoc'],
  },
  {
    name: 'VNExpress Th·ªùi S·ª±',
    URL: 'https://vnexpress.net/rss/thoi-su.rss', // ƒê√É THAY ƒê·ªîI T·ª™ 'rss_url' TH√ÄNH 'URL'
    category_slugs: ['thoi-su'],
  },
  // Th√™m c√°c ngu·ªìn kh√°c n·∫øu c·∫ßn
];

// H√†m ch√≠nh ƒë·ªÉ th·ª±c hi·ªán seed d·ªØ li·ªáu
export default async ({ strapi }: { strapi: any }) => {
  console.log('üöÄ Starting seed data...');

  // B∆∞·ªõc 1: Seed Categories
  // S·ª≠ d·ª•ng m·ªôt ƒë·ªëi t∆∞·ª£ng ƒë·ªÉ l∆∞u tr·ªØ slug -> ID c·ªßa c√°c category ƒë√£ t·∫°o/t·ªìn t·∫°i
  // ƒêi·ªÅu n√†y c·∫ßn thi·∫øt cho vi·ªác g√°n m·ªëi quan h·ªá cho Sources sau n√†y
  const createdCategories: Record<string, number> = {};

  console.log('\n--- Seeding Categories ---');
  for (const cat of categoriesData) {
    try {
      const exists = await strapi.db.query('api::category.category').findOne({
        where: { slug: cat.slug },
      });

      if (!exists) {
        const newCategory = await strapi.db.query('api::category.category').create({
          data: {
            ...cat,
            // ƒê·∫£m b·∫£o publishedAt ƒë∆∞·ª£c g√°n n·∫øu draftAndPublish ƒë∆∞·ª£c b·∫≠t
            publishedAt: new Date().toISOString(),
          },
        });
        createdCategories[cat.slug] = newCategory.id;
        console.log(`‚úÖ Category seeded: ${cat.name} (ID: ${newCategory.id})`);
      } else {
        createdCategories[cat.slug] = exists.id;
        console.log(`‚ÑπÔ∏è Category exists: ${cat.name} (ID: ${exists.id})`);
      }
    } catch (error) {
      console.error(`‚ùå Failed to seed category ${cat.name}:`, error);
    }
  }

  // B∆∞·ªõc 2: Seed Sources
  console.log('\n--- Seeding Sources ---');
  for (const src of sourcesData) {
    try {
      // L·∫•y ID c·ªßa c√°c Category li√™n quan d·ª±a tr√™n category_slugs
      const categoryIds: number[] = [];
      for (const slug of src.category_slugs) {
        if (createdCategories[slug]) {
          categoryIds.push(createdCategories[slug]);
        } else {
          console.warn(`‚ö†Ô∏è Category slug not found for source "${src.name}": "${slug}". Please ensure category exists.`);
        }
      }

      if (src.category_slugs.length > 0 && categoryIds.length === 0) {
        console.warn(`‚ö†Ô∏è No valid categories found for source: ${src.name}. Skipping this source.`);
        continue; // B·ªè qua ngu·ªìn n√†y n·∫øu kh√¥ng t√¨m th·∫•y danh m·ª•c li√™n quan
      }

      const exists = await strapi.db.query('api::source.source').findOne({
        where: { URL: src.URL }, // ƒê√É THAY ƒê·ªîI T·ª™ 'rss_url' TH√ÄNH 'URL'
      });

      if (!exists) {
        const newSource = await strapi.db.query('api::source.source').create({
          data: {
            name: src.name,
            URL: src.URL, // ƒê√É THAY ƒê·ªîI T·ª™ 'rss_url' TH√ÄNH 'URL'
            homepage_url: src.homepage_url,
            logo: src.logo,
            description: src.description,
            // G√°n m·ªëi quan h·ªá manyToMany b·∫±ng c√°ch truy·ªÅn m·ªôt m·∫£ng c√°c IDs
            categories: categoryIds,
            // ƒê·∫£m b·∫£o publishedAt ƒë∆∞·ª£c g√°n n·∫øu draftAndPublish ƒë∆∞·ª£c b·∫≠t
            publishedAt: new Date().toISOString(),
          },
        });
        console.log(`‚úÖ Source seeded: ${src.name} (ID: ${newSource.id})`);
      } else {
        console.log(`‚ÑπÔ∏è Source exists: ${src.name} (ID: ${exists.id})`);
        // T√πy ch·ªçn: N·∫øu ngu·ªìn ƒë√£ t·ªìn t·∫°i, b·∫°n c√≥ th·ªÉ c√¢n nh·∫Øc c·∫≠p nh·∫≠t m·ªëi quan h·ªá category n·∫øu c·∫ßn
        // V√≠ d·ª•:
        // await strapi.db.query('api::source.source').update({
        //   where: { id: exists.id },
        //   data: { categories: categoryIds },
        // });
        // console.log(`üîÑ Source updated: ${src.name} (ID: ${exists.id}) with new categories.`);
      }
    } catch (error) {
      console.error(`‚ùå Failed to seed source ${src.name}:`, error);
    }
  }

  console.log('\n‚úÖ Seeding completed!');
};