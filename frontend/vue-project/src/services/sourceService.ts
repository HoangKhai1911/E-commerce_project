// src/services/sourceService.ts
import apiClient from '@/lib/api'; // S·ª≠ d·ª•ng instance ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh v·ªõi interceptor

// Interface cho d·ªØ li·ªáu logo t·ª´ Strapi
interface Logo {
  id: number;
  url: string;
}

// ƒê·ªãnh nghƒ©a interface cho Source, kh·ªõp v·ªõi c·∫•u tr√∫c d·ªØ li·ªáu t·ª´ Strapi
interface Source {
  id: number;
  name: string;
  URL: string;
  logo?: Logo; // Logo c√≥ th·ªÉ kh√¥ng c√≥
}

export const sourceService = {
  /**
   * L·∫•y t·∫•t c·∫£ c√°c ngu·ªìn t·ª´ API.
   * @param params C√°c tham s·ªë truy v·∫•n t√πy ch·ªçn (v√≠ d·ª•: { sort: 'id:asc' })
   * @returns Promise<Source[]> M·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng ngu·ªìn
   */
  async getAll(params?: Record<string, any>): Promise<Source[]> { // üî¥ ƒê√£ th√™m tham s·ªë 'params' t√πy ch·ªçn
    try {
      // G·ª≠i y√™u c·∫ßu GET ƒë·∫øn endpoint /sources v·ªõi c√°c tham s·ªë t√πy ch·ªçn
      // Th√™m populate=logo ƒë·ªÉ l·∫•y d·ªØ li·ªáu logo
      const response = await apiClient.get('/sources', { 
        params: { ...params, populate: 'logo' } 
      });
      // √Ånh x·∫° d·ªØ li·ªáu t·ª´ ph·∫£n h·ªìi c·ªßa Strapi ƒë·ªÉ ph√π h·ª£p v·ªõi interface Source
      return response.data.data.map((item: any) => ({
        id: item.id,
        name: item.attributes.name,
        URL: item.attributes.URL,
        logo: item.attributes.logo?.data?.attributes, // L·∫•y d·ªØ li·ªáu logo, ki·ªÉm tra null
      }));
    } catch (error) {
      console.error('Error in sourceService.getAll:', error);
      throw error; // N√©m l·ªói ƒë·ªÉ component g·ªçi c√≥ th·ªÉ x·ª≠ l√Ω
    }
  },

  /**
   * T·∫°o m·ªôt ngu·ªìn m·ªõi.
   * @param data D·ªØ li·ªáu c·ªßa ngu·ªìn m·ªõi (name, url)
   * @returns Promise<Source> ƒê·ªëi t∆∞·ª£ng ngu·ªìn ƒë√£ ƒë∆∞·ª£c t·∫°o
   */
  async create(data: { name: string; URL: string }): Promise<Source> {
    try {
      const response = await apiClient.post('/sources', { data });
      return {
        id: response.data.data.id,
        name: response.data.data.attributes.name,
        URL: response.data.data.attributes.URL,
      };
    } catch (error) {
      console.error('Error in sourceService.create:', error);
      throw error;
    }
  },

  /**
   * C·∫≠p nh·∫≠t m·ªôt ngu·ªìn hi·ªán c√≥.
   * @param id ID c·ªßa ngu·ªìn c·∫ßn c·∫≠p nh·∫≠t
   * @param data D·ªØ li·ªáu c·∫≠p nh·∫≠t (name, url)
   * @returns Promise<Source> ƒê·ªëi t∆∞·ª£ng ngu·ªìn ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
   */
  async update(id: number, data: { name?: string; URL?: string }): Promise<Source> {
    try {
      const response = await apiClient.put(`/sources/${id}`, { data });
      return {
        id: response.data.data.id,
        name: response.data.data.attributes.name,
        URL: response.data.data.attributes.URL,
      };
    } catch (error) {
      console.error('Error in sourceService.update:', error);
      throw error;
    }
  },

  /**
   * X√≥a m·ªôt ngu·ªìn.
   * @param id ID c·ªßa ngu·ªìn c·∫ßn x√≥a
   * @returns Promise<void>
   */
  async delete(id: number): Promise<void> {
    try {
      await apiClient.delete(`/sources/${id}`);
    } catch (error) {
      console.error('Error in sourceService.delete:', error);
      throw error;
    }
  },
};
